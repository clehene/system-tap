#! /usr/bin/env stap

# This script tries to identify contended user-space locks by hooking
# into the futex system call.

# Note that this is a variation of the script in the stap futex examples
# located here http://goo.gl/s4fQza 
# The differences are 
# it prints both FUTEX_WAIT  and FUTEX_WAIT as they happen
# TODO FUTEX_WAIT_PRIVATE

global thread_thislock # short
global thread_thislock_val
global thread_blocktime #
global FUTEX_WAIT = 0 /*, FUTEX_WAKE = 1 */

global lock_waits # long-lived stats on (tid,lock) blockage elapsed time
global process_names # long-lived pid-to-execname mapping

probe syscall.futex {
  # don't care about WAKE event originator
  if (op != FUTEX_WAIT || op != FUTEX_WAKE) next
  t = tid ()
  process_names[pid()] = execname()
  thread_thislock[t] = $uaddr
  thread_thislock_val[t] = $val
  thread_blocktime[t] = gettimeofday_us()
  if (op == FUTEX_WAIT) printf("-> %s[%d] %d lock %p val %d\n", execname(),
                               pid(), t, $uaddr, $val)
  if (op == FUTEX_WAKE) printf("<- %s[%d] %d lock %p val %d\n", execname(),
                               pid(), t, val, lock)
}

probe syscall.futex.return {
  t = tid()
  ts = thread_blocktime[t]
  if (ts) {
    elapsed = gettimeofday_us() - ts
    lock_waits[pid(), thread_thislock[t], thread_thislock_val[t]] <<< elapsed
    delete thread_blocktime[t]
    delete thread_thislock[t]
    delete thread_thislock_val[t]
  }
}

probe end {
  foreach ([pid+, lock, val] in lock_waits)
    printf ("%s[%d] %d lock %p contended %d times, %d avg us\n",
            process_names[pid], pid, val, lock,
            @count(lock_waits[pid,lock,val]), @avg(lock_waits[pid,lock,val]))
}
